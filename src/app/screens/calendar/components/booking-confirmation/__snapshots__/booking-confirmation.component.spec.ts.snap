// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BookingConfirmationComponent should compile 1`] = `
BookingConfirmationComponent {
  "__ngContext__": 0,
  "_document": Document {
    "location": Location {
      "assign": [Function],
      "hash": "",
      "host": "localhost",
      "hostname": "localhost",
      "href": "http://localhost/",
      "origin": "http://localhost",
      "pathname": "/",
      "port": "",
      "protocol": "http:",
      "reload": [Function],
      "replace": [Function],
      "search": "",
      "toString": [Function],
    },
  },
  "_translate": {
    "get": [MockFunction],
    "instant": [MockFunction],
  },
  "bookingProductId$": _Store {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "operator": [Function],
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "source": _Store {
      "actionsObserver": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "operator": [Function],
      "reducerManager": _MockReducerManager {
        "_value": [Function],
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "source": _MockStore {
        "actionsObserver": _ActionsSubject {
          "_value": {
            "type": "@ngrx/store/init",
          },
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "dispatch": [MockFunction],
        "initialState": {},
        "lastState": {},
        "reducerManager": _MockReducerManager {
          "_value": [Function],
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "scannedActions$": Observable {
          "source": _ActionsSubject {
            "_value": {
              "type": "@ngrx/store/init",
            },
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": [],
            "thrownError": null,
          },
        },
        "selectors": Map {},
        "source": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
        "state": [Function],
        "state$": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
      },
      "state": [Function],
    },
    "state": [Function],
  },
  "bookingSnapshot$": _Store {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "operator": [Function],
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "source": _Store {
      "actionsObserver": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "operator": [Function],
      "reducerManager": _MockReducerManager {
        "_value": [Function],
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "source": _MockStore {
        "actionsObserver": _ActionsSubject {
          "_value": {
            "type": "@ngrx/store/init",
          },
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "dispatch": [MockFunction],
        "initialState": {},
        "lastState": {},
        "reducerManager": _MockReducerManager {
          "_value": [Function],
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "scannedActions$": Observable {
          "source": _ActionsSubject {
            "_value": {
              "type": "@ngrx/store/init",
            },
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": [],
            "thrownError": null,
          },
        },
        "selectors": Map {},
        "source": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
        "state": [Function],
        "state$": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
      },
      "state": [Function],
    },
    "state": [Function],
  },
  "bookingSuccess$": _Store {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "operator": [Function],
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "source": _Store {
      "actionsObserver": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "operator": [Function],
      "reducerManager": _MockReducerManager {
        "_value": [Function],
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "source": _MockStore {
        "actionsObserver": _ActionsSubject {
          "_value": {
            "type": "@ngrx/store/init",
          },
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "dispatch": [MockFunction],
        "initialState": {},
        "lastState": {},
        "reducerManager": _MockReducerManager {
          "_value": [Function],
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "scannedActions$": Observable {
          "source": _ActionsSubject {
            "_value": {
              "type": "@ngrx/store/init",
            },
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": [],
            "thrownError": null,
          },
        },
        "selectors": Map {},
        "source": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
        "state": [Function],
        "state$": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
      },
      "state": [Function],
    },
    "state": [Function],
  },
  "clipboard": {
    "copy": [MockFunction],
  },
  "downloadClientICSPending$": _Store {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "operator": [Function],
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "source": _Store {
      "actionsObserver": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "operator": [Function],
      "reducerManager": _MockReducerManager {
        "_value": [Function],
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "source": _MockStore {
        "actionsObserver": _ActionsSubject {
          "_value": {
            "type": "@ngrx/store/init",
          },
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "dispatch": [MockFunction],
        "initialState": {},
        "lastState": {},
        "reducerManager": _MockReducerManager {
          "_value": [Function],
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "scannedActions$": Observable {
          "source": _ActionsSubject {
            "_value": {
              "type": "@ngrx/store/init",
            },
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": [],
            "thrownError": null,
          },
        },
        "selectors": Map {},
        "source": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
        "state": [Function],
        "state$": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
      },
      "state": [Function],
    },
    "state": [Function],
  },
  "getAuthenticationUrlPending$": _Store {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "operator": [Function],
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "source": _Store {
      "actionsObserver": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "operator": [Function],
      "reducerManager": _MockReducerManager {
        "_value": [Function],
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "source": _MockStore {
        "actionsObserver": _ActionsSubject {
          "_value": {
            "type": "@ngrx/store/init",
          },
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "dispatch": [MockFunction],
        "initialState": {},
        "lastState": {},
        "reducerManager": _MockReducerManager {
          "_value": [Function],
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "scannedActions$": Observable {
          "source": _ActionsSubject {
            "_value": {
              "type": "@ngrx/store/init",
            },
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": [],
            "thrownError": null,
          },
        },
        "selectors": Map {},
        "source": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
        "state": [Function],
        "state$": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
      },
      "state": [Function],
    },
    "state": [Function],
  },
  "iconColors": {
    "Danger300": "fill-danger-e300",
    "Neutral0": "fill-neutral-n0",
    "Neutral200": "fill-neutral-n200",
    "Neutral300": "fill-neutral-n300",
    "Neutral400": "fill-neutral-n400",
    "Neutral500": "fill-neutral-n500",
    "Primary100": "fill-primary-p100",
    "Primary300": "fill-primary-p300-main",
    "Primary400": "fill-primary-p400",
    "Success300": "fill-success-s300",
    "Warning300": "fill-warning-w300",
    "white": "fill-white",
  },
  "icons": {
    "ArrowDown": "arrow-down",
    "ArrowLeft": "arrow-left",
    "ArrowUp": "arrow-up",
    "Calendar": "calendar",
    "Camera": "camera",
    "CaretDown": "caret-down",
    "Checked": "checked",
    "Checkmark": "checkmark",
    "Chevron": "chevron",
    "Clear": "clear",
    "Clock": "clock",
    "CoinHands": "coin-hands",
    "Columns": "columns",
    "Copy": "copy",
    "Desktop": "desktop",
    "DialogClose": "dialog-close",
    "DigicallsOrderSales": "digicalls-order-sales",
    "DragAndDrop": "drag-and-drop",
    "ErrorFilled": "error-filled",
    "ExclamationMark": "exclamation-mark",
    "ExclamationMarkFilled": "exclamation-mark-filled",
    "ExternalLink": "external-link",
    "Eye": "eye",
    "EyeCrossed": "eye-crossed",
    "Faq": "faq",
    "File": "file",
    "FilePlay": "file-play",
    "Folder": "folder",
    "Funnel": "funnel",
    "Gear": "gear",
    "Hamburger": "hamburger",
    "InfoFilled": "info-filled",
    "Link": "link",
    "LinkHorizontal": "link-horizontal",
    "Loader": "loader",
    "MagnifyingGlass": "magnifying-glass",
    "Members": "members",
    "Minus": "minus",
    "Mobile": "mobile",
    "More": "more",
    "Pencil": "pencil",
    "Phone": "phone",
    "Picture": "picture",
    "Plug": "plug",
    "Plus": "plus",
    "Popup": "popup",
    "QuestionMark": "question-mark",
    "Redo": "redo",
    "Restore": "restore",
    "Rows": "rows",
    "Save": "save",
    "Sections": "sections",
    "Skip": "skip",
    "Stack": "stack",
    "Stats": "stats",
    "Tablet": "tablet",
    "Tag": "tag",
    "Text": "text",
    "Translation": "translation",
    "Trash": "trash",
    "Undo": "undo",
    "UserMoney": "user-money",
  },
  "isBookingSynced$": _Store {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "operator": [Function],
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "source": _Store {
      "actionsObserver": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "operator": [Function],
      "reducerManager": _MockReducerManager {
        "_value": [Function],
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
      "source": _MockStore {
        "actionsObserver": _ActionsSubject {
          "_value": {
            "type": "@ngrx/store/init",
          },
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "dispatch": [MockFunction],
        "initialState": {},
        "lastState": {},
        "reducerManager": _MockReducerManager {
          "_value": [Function],
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [],
          "thrownError": null,
        },
        "scannedActions$": Observable {
          "source": _ActionsSubject {
            "_value": {
              "type": "@ngrx/store/init",
            },
            "closed": false,
            "currentObservers": null,
            "hasError": false,
            "isStopped": false,
            "observers": [],
            "thrownError": null,
          },
        },
        "selectors": Map {},
        "source": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
        "state": [Function],
        "state$": _MockState {
          "_value": {},
          "closed": false,
          "currentObservers": null,
          "hasError": false,
          "isStopped": false,
          "observers": [
            SafeSubscriber {
              "_finalizers": [
                Subscription {
                  "_finalizers": null,
                  "_parentage": [Circular],
                  "closed": false,
                  "initialTeardown": [Function],
                },
              ],
              "_parentage": null,
              "closed": false,
              "destination": ConsumerObserver {
                "partialObserver": {
                  "error": [Function],
                  "next": [Function],
                },
              },
              "initialTeardown": undefined,
              "isStopped": false,
            },
          ],
          "state": [Function],
          "thrownError": null,
        },
      },
      "state": [Function],
    },
    "state": [Function],
  },
  "meetingTypeIds": {
    "1": "Inbound",
    "2": "Outbound",
    "3": "Zoom",
    "Inbound": 1,
    "Outbound": 2,
    "Zoom": 3,
  },
  "ngAfterContentChecked$": Subject {
    "closed": false,
    "currentObservers": [],
    "hasError": false,
    "isStopped": false,
    "observers": [],
    "thrownError": null,
  },
  "ngAfterContentInit$": Subject {
    "closed": false,
    "currentObservers": [],
    "hasError": false,
    "isStopped": true,
    "observers": [],
    "thrownError": null,
  },
  "ngAfterViewChecked$": Subject {
    "closed": false,
    "currentObservers": [],
    "hasError": false,
    "isStopped": false,
    "observers": [],
    "thrownError": null,
  },
  "ngAfterViewInit$": Subject {
    "closed": false,
    "currentObservers": [],
    "hasError": false,
    "isStopped": true,
    "observers": [],
    "thrownError": null,
  },
  "ngDoCheck$": Subject {
    "closed": false,
    "currentObservers": [],
    "hasError": false,
    "isStopped": false,
    "observers": [],
    "thrownError": null,
  },
  "ngOnChanges$": Subject {
    "closed": false,
    "currentObservers": null,
    "hasError": false,
    "isStopped": false,
    "observers": [],
    "thrownError": null,
  },
  "ngOnDestroy$": Subject {
    "closed": false,
    "currentObservers": null,
    "hasError": false,
    "isStopped": false,
    "observers": [],
    "thrownError": null,
  },
  "ngOnInit$": Subject {
    "closed": false,
    "currentObservers": [],
    "hasError": false,
    "isStopped": true,
    "observers": [],
    "thrownError": null,
  },
  "spinnerColor": "fill-primary-p300-main",
  "store": _MockStore {
    "actionsObserver": _ActionsSubject {
      "_value": {
        "type": "@ngrx/store/init",
      },
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "dispatch": [MockFunction],
    "initialState": {},
    "lastState": {},
    "reducerManager": _MockReducerManager {
      "_value": [Function],
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [],
      "thrownError": null,
    },
    "scannedActions$": Observable {
      "source": _ActionsSubject {
        "_value": {
          "type": "@ngrx/store/init",
        },
        "closed": false,
        "currentObservers": null,
        "hasError": false,
        "isStopped": false,
        "observers": [],
        "thrownError": null,
      },
    },
    "selectors": Map {},
    "source": _MockState {
      "_value": {},
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [
        SafeSubscriber {
          "_finalizers": [
            Subscription {
              "_finalizers": null,
              "_parentage": [Circular],
              "closed": false,
              "initialTeardown": [Function],
            },
          ],
          "_parentage": null,
          "closed": false,
          "destination": ConsumerObserver {
            "partialObserver": {
              "error": [Function],
              "next": [Function],
            },
          },
          "initialTeardown": undefined,
          "isStopped": false,
        },
      ],
      "state": [Function],
      "thrownError": null,
    },
    "state": [Function],
    "state$": _MockState {
      "_value": {},
      "closed": false,
      "currentObservers": null,
      "hasError": false,
      "isStopped": false,
      "observers": [
        SafeSubscriber {
          "_finalizers": [
            Subscription {
              "_finalizers": null,
              "_parentage": [Circular],
              "closed": false,
              "initialTeardown": [Function],
            },
          ],
          "_parentage": null,
          "closed": false,
          "destination": ConsumerObserver {
            "partialObserver": {
              "error": [Function],
              "next": [Function],
            },
          },
          "initialTeardown": undefined,
          "isStopped": false,
        },
      ],
      "state": [Function],
      "thrownError": null,
    },
  },
}
`;
